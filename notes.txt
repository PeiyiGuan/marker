
In this assignment you will develop a tool that marks an assignment that involves two
programs connected by a pipe and you will restrict the execution time to maximum 3 seconds.


Your tool will provide the standard input of the first program with data from file
"test.in" and record the standard output of the second program to file
"test.out". The standard error of both programs will be recorded in file
"test.err1" and "test.err2" respectively.

You will write a program called marker that accepts at least three arguments as for
example:
./marker ls CourseDir -p- wc -c
which means that marker will start a process running ls with argument CourseDir
and then start program wc with argument -c. It will also create a pipe and cause the output
of the first program to write to the pipe and the second program to read from the other
end of the pipe. 
The argument "-p-" serves as a separator. 
The standard input of the
first program and the standard output of the second will be redirected from and to
"test.in" and "test.out" respectively. The standard error from both will be redirected
to "test.err1" and "test.err2". The alarm system call will be used to
notify marker that 3 seconds have gone by. If one or both processes are still running
then the living child is sent a SIGKILL signal and an error message
1
marker: At least one process did not finish
written to the standard error of the tool. For each process that finishes the tool prints to
the standard output a message
Process ls finished with status 2
or
Process ls finished with status 0
depending of course on the return status.



pid _ pid = fork();

if (pid < 0){
    perror ("fork failed");
    exit(1);
}